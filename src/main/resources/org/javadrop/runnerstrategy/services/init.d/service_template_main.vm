#!/bin/bash

# Variables required from external plugin:
# SVC_NAME
# JTY_NAME
# PKG_INSTALL_LOC
#
# This service currently support a 'jetty' or 'main()' launch.
# This needs to be abstracted out so this just supports multiple
# services.
#

#set( $PID_FILE = "${PKG_INSTALL_LOC}/${PKG_NAME}.pid" )
#set( $LOCK_FILE = "${PKG_INSTALL_LOC}/${PKG_NAME}.lock" )

#*
The following 'empty sets' are necessary so that velocity will escape the variables
below properly. These are variables that are local to the script and not part of the
velocity context.
*#
#set( $MY_SCRIPT = "" )
#set( $MY_WEB_SCRIPT = "" )
#set( $RETVAL = "" )
#set( $LIMIT = "" )
#set( $PID = "" )
#set( $count = "" )
#set( $PS = "" )
#set( $serviceparam = "" )

RETVAL=0
serviceparam=${PKG_STANDALONE}

MY_SCRIPT="${PKG_INSTALL_LOC}/bin/${SVC_NAME}.sh"
MY_WEB_SCRIPT="${PKG_INSTALL_LOC}/bin/${JTY_NAME}.sh"

# Retry Limit
LIMIT=15

cd ${PKG_INSTALL_LOC}

umask u=rwx,g=rwx,o=

# Source function library.
. /etc/init.d/functions

start() {
    echo -n $"Starting $PKG_NAME: "

    check_if_running
    if [ $? != 0 ]; then
        echo -n "$PKG_NAME already running"
        echo_failure
    else
        # need to pre-create the pid file so that the executing user can write to it
        touch $PID_FILE
        echo > $PID_FILE     # clear it out
        chown $PKG_USER:$PKG_GROUP $PID_FILE
        
        # Note that "-x" is an arbitrary flag for passing a command line parameter to a java service.
        shopt -s nocasematch

        if [ -z "\$serviceparam" ]; then
            su $PKG_USER -c "\$MY_WEB_SCRIPT start"
        else
            # If there is a config file parameter pass it along to the stand along service
            su $PKG_USER -c "\$MY_SCRIPT start -x \$serviceparam"
        fi
        RETVAL=$?
        check_if_running
        if [ "\$RETVAL" = 0 -a $? != 0 ]; then
            touch $LOCK_FILE
            echo_success
        else
            #echo -n "RETVAL: \$RETVAL not 0 or \$PS empty"
            echo_failure
        fi
    fi
    echo
    return \$RETVAL
}

stop() {
    echo -n $"Stopping $PKG_NAME: "

    check_if_running
    if [ $? = 0 ]; then
        echo -n "$PKG_NAME not running"
        echo_failure
    else
        kill \$PID
        RETVAL=$?

        if [ "\$RETVAL" != 0 ]; then
            echo_failure
            return
        fi

        echo -n "waiting for $PKG_NAME to stop";

        count=0
        while [ "\$count" -lt "\$LIMIT" ]
        do
            count=`expr \$count + 1`
            check_if_running
            if [ $? == 0 ]; then
                rm -f $LOCK_FILE
                rm -f $PID_FILE
                echo_success
                break
            fi
            echo -n "."
            sleep 1
        done

        if [ "\$count" -eq "\$LIMIT" ]; then
            echo_failure
        fi

    fi
    echo
}

status() {
    check_if_running
    if [ $? = 0 ]; then
        echo "$PKG_NAME not running"
    else
        echo "$PKG_NAME running, pid: \$PID"
    fi
}


check_if_running() {
    if [ -f $PID_FILE ]; then
        PID=`cat $PID_FILE`
        if [ "\$PID" != "" ]; then
            kill -0 \$PID &>/dev/null
            if [ $? = 0 ]; then
                return 1;
            fi;
        fi
    fi
    PID=
    return 0
}




case "$1" in
  start)
  	start
	;;
  stop)
  	stop
	;;
  restart)
	stop
  	start
	;;
  status)
    status
	;;
  *)
	echo $"Usage: $0 {start [configname]|stop|status|restart}"
	RETVAL=3
esac
exit \$RETVAL
